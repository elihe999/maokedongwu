"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"    -> General
"    -> Vundle Plugins
"    -> VIM user interface
"    -> Colors and Fonts and GUI
"    -> Files and backups
"    -> Text, tab and indent related
"    -> Moving around, tabs and buffers
"    -> Status line
"    -> Editing mappings
"    -> Spell checking
"    -> Key mappings
"    -> Fold setting
"    -> Languages
"    -> Helper functions
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Sets how many lines of history VIM has to remember
set history=1000

" Enable filetype plugins -- disabled due to install of vundle
"filetype plugin on
"filetype indent on

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Vundle Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" install vundle plugins as: git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
" setup Vundle Plugins
" for first time, open vim and run :PluginInstall to install all plugins

" be iMproved, required
set nocompatible
" required for vundle
filetype off
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
" call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" load jedi-vim (from git)
Plugin 'davidhalter/jedi-vim'

" load Yggdroot indentLine
Plugin 'Yggdroot/indentLine'

" load Nerd Tree
Plugin 'scrooloose/nerdtree'
" Nerdtree hide pyc, .vim, ~ and .swap files
let NERDTreeIgnore=['\.vim$', '\~$', '\.pyc$', '\.swp$']

" Syntastic (syntax checking)
" if using for python3, need to set it up
" let g:syntastic_python_python_exec = '/path/to/python3'
Plugin 'scrooloose/syntastic'
" have the check disabled by default

" fugitive.vim (git plugin)
Plugin 'tpope/vim-fugitive.git'

" vim-go
Plugin 'fatih/vim-go'

" powerline-status
" Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}

"vim-airline and themes
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" To ignore plugin indent changes, instead use:
" filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn on the WiLd menu. command-line completion operates in an enhanced mode
set wildmenu

" Ignore compiled files
set wildignore=*.o,*~,*.pyc

"Always show current position
set ruler

" Height of the command bar
set cmdheight=1

" A buffer becomes hidden when it is abandoned
set hid

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
" set ignorecase

" When searching try to be smart about cases 
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

" Show (partial) command in status line
set showcmd 

" Turn on numbers
set number

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" indentLine
" let g:indentLine_loaded=1
"let g:indentLine_color_gui = '#FF0000'
let g:indentLine_color_gui = '#A9A9A9'
let g:indentLine_color_term = 239


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts and GUI
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting
syntax enable

set background=dark
colorscheme desert

" Set extra options when running in GUI mode
if has("gui_running")
    set guioptions-=T
    set guioptions+=e
    set t_Co=256
    set guitablabel=%M\ %t
    if has("mac") || has("macunix")
        set guifont=Monaco:h14
    else
        "set guifont=Monospace\ 14
        set guifont=DejaVu\ Sans\ Mono\ 14
    endif
    "so gvim will take shift+insert as copy buffer to gvim
    map <silent> <S-Insert> "+p
    imap <silent> <S-Insert> <Esc>"+pa
endif

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,mac,dos


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nobackup
set nowb
set noswapfile

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

" Linebreak on 500 characters
set lbr
set tw=500

" Auto indent
set ai 
" Smart indent
set si 
" Wrap lines
set wrap 


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif


" Remember info about open buffers on close
set viminfo^=%

""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2

" Format the status line
set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l\ Column:\ %c


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remap VIM 0 to first non-blank character
" map 0 ^

" Move a line of text using ALT+[jk] or Comamnd+[jk] on mac
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

if has("mac") || has("macunix")
  nmap <D-j> <M-j>
  nmap <D-k> <M-k>
  vmap <D-j> <M-j>
  vmap <D-k> <M-k>
endif

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.coffee :call DeleteTrailingWS()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" set spell check (maybe make toggle?)
" set spell


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Key mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NerdTree
map <F2> :NERDTreeToggle <CR>

" Syntax Check for python
map <F3> :SyntasticToggleMode <CR>

" Enable Fold
map <F4> :set foldmethod=indent <CR>

" Toggle cursorline 
map <F5> :call ToggleCursorLine() <CR>

" Toggle cursorcolumn
map <F6> :call ToggleCursorColumn() <CR>

" Toggle Indent Lines Display
map <F7> :IndentLinesToggle <CR>
" check python code
map <F8> :!pychecker % <CR>
" run python 
map <F9> :!python % <CR>
" toggle auto indent on /off
map <F10> :call ToggleIndentCopy() <CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Fold setting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Fold (should set as toggle)
" set foldmethod=indent

" save fold on exit for python only
" autocmd BufWrite,BufWritePost *.py mkview #disabled due to conflict with omni completion
" load fold on start for python only
" autocmd BufEnter *.py silent loadview #disabled due to conflict with omni completion


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Languages
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" GO
" -------------------------------------------------------------
" 
"autocmd BufNewFile,BufRead *.go filetype off
"autocmd BufNewFile,BufRead *.go filetype plugin indent off
"autocmd BufNewFile,BufRead *.go set runtimepath+=$GOROOT/misc/vim
"autocmd BufNewFile,BufRead *.go filetype plugin indent on
" -------------------------------------------------------------


" Python
" -------------------------------------------------------------
" Key mappings
" Fold setting
" -------------------------------------------------------------

" Python virtualenv support
py << EOF
import os
import sys
if 'VIRTUAL_ENV' in os.environ: 
    project_base_dir = os.environ['VIRTUAL_ENV'] 
    activate_this = os.path.join(project_base_dir, 'bin/activate_this.py') 
    execfile(activate_this, dict(__file__=activate_this)) 
EOF

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction

" Highligh current line
function! ToggleCursorLine()
    if &cursorline
        setlocal nocursorline
    else 
        setlocal cursorline
    endif
endfunction

" Highligh current column
function! ToggleCursorColumn()
    if &cursorcolumn
        setlocal nocursorcolumn
    else
        setlocal cursorcolumn
    endif
endfunction

" set Indent On or Off
function! ToggleIndentCopy()
    if &autoindent 
        set noautoindent
    else
        set autoindent
    endif
    if &smartindent
        set nosmartindent
    else
        set smartindent
    endif
    if &indentexpr 
        set indentexpr=off
    else
        set indentexpr=on
    endif
endfunction

